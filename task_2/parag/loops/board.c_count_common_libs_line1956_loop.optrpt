Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -I/home/varun/hpa/task_2/varun/loops/common -I/home/varun/hpa/task_2/varun/loops/input -O3 -g -std=c99 -xHost -vec-threshold100 -vec -qopt-report-phase=vec -qopt-report=5 -o board.c_count_common_libs_line1956.vec -lcrypto -lssl -lm

Begin optimization report for: loop()

    Report from: Vector optimizations [vec]


LOOP BEGIN at board.c_count_common_libs_line1956_loop.c(17,5)
<Distributed chunk1>
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 1 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 2.540 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at board.c_count_common_libs_line1956_loop.c(17,5)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at board.c_count_common_libs_line1956_loop.c(17,5)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between commonlibs (17:430) and commonlibs (17:430)
   remark #15346: vector dependence: assumed FLOW dependence between commonlibs (17:430) and commonlibs (17:430)
   remark #15346: vector dependence: assumed FLOW dependence between commonlibs (17:430) and commonlibs (17:430)
   remark #15346: vector dependence: assumed ANTI dependence between commonlibs (17:430) and commonlibs (17:430)
LOOP END
===========================================================================
