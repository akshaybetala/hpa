Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -I/home/akshay/Desktop/hpa/task_2/akshay/common -I/home/akshay/Desktop/hpa/task_2/akshay/input -O3 -g -std=c99 -xHost -vec-threshold100 -vec -qopt-report-phase=vec -qopt-report=5 -o matchpat.c_dfa_prepare_for_match_line517.vec -lcrypto -lssl -lm

Begin optimization report for: loop()

    Report from: Vector optimizations [vec]


LOOP BEGIN at matchpat.c_dfa_prepare_for_match_line517_loop.c(17,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at matchpat.c_dfa_prepare_for_match_line517_loop.c(17,41)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at matchpat.c_dfa_prepare_for_match_line517_loop.c(17,41)
      remark #15388: vectorization support: reference dfa_p[i*84+j+1785] has aligned access   [ matchpat.c_dfa_prepare_for_match_line517_loop.c(17,77) ]
      remark #15389: vectorization support: reference board[i*20+21+j] has unaligned access   [ matchpat.c_dfa_prepare_for_match_line517_loop.c(17,136) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <convert[color][board[i*20+21+j]]>, part of index is read from memory   [ matchpat.c_dfa_prepare_for_match_line517_loop.c(17,121) ]
      remark #15305: vectorization support: vector length 32
      remark #15309: vectorization support: normalized vectorization overhead 0.076
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 5.370 
      remark #15478: estimated potential speedup: 1.260 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at matchpat.c_dfa_prepare_for_match_line517_loop.c(17,41)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference dfa_p[i*84+j+1785] has aligned access   [ matchpat.c_dfa_prepare_for_match_line517_loop.c(17,77) ]
      remark #15389: vectorization support: reference board[i*20+21+j] has unaligned access   [ matchpat.c_dfa_prepare_for_match_line517_loop.c(17,136) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.433
   LOOP END
LOOP END
===========================================================================
