Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -I/home/akshay/Desktop/hpa/task_2/akshay/common -I/home/akshay/Desktop/hpa/task_2/akshay/input -O3 -g -std=c99 -xHost -vec-threshold100 -vec -qopt-report-phase=vec -qopt-report=5 -o influence.c_compute_escape_influence_line1605.vec -lcrypto -lssl -lm

Begin optimization report for: loop()

    Report from: Vector optimizations [vec]


LOOP BEGIN at influence.c_compute_escape_influence_line1605_loop.c(15,5)
   remark #15389: vectorization support: reference escape_value[ii] has unaligned access   [ influence.c_compute_escape_influence_line1605_loop.c(15,105) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <escape_values[ii][cache_number]>, masked, stride is 2   [ influence.c_compute_escape_influence_line1605_loop.c(15,71) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.019
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 15 
   remark #15477: vector cost: 20.250 
   remark #15478: estimated potential speedup: 0.740 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at influence.c_compute_escape_influence_line1605_loop.c(15,5)
<Remainder>
LOOP END
===========================================================================
